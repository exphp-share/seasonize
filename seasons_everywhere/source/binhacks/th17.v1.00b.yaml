binhacks:
  Season items go in PIV item array:
    addr: "0x0043476d"
    expected:
      # A bunch of equality checks
      - "83FF 09 0F84 95020000"
      - "83FF 0A 0F84 8C020000"
      - "83FF 0B 0F84 83020000"
      - "83FF 0C 0F84 7A020000"
    code:
      - "83FF 09          " # cmp edi,0x9
      - "7C 31 // 90909090" # jl  USE_STANDARD_ARRAY

      - "83FF 0f          " # cmp edi,0xf
      - "0F8E 8C020000    " # jle USE_PIV_ITEM_ARRAY

      - "83FF 30          " # cmp edi,0x30
      - "0F84 83020000    " # je  0x00434a0b (USE_PIV_ITEM_ARRAY)

      - "EB 19 // CCCCCC  " # jl  USE_STANDARD_ARRAY
      - "CCCCCCCC         " # int 3

  Season items on graze:
    addr: "0x0044a0dc"
    expected: "5f // 5e // 8be5 // 5d"
    code: "E9 [codecave:ExpHP.seasons-everywhere.item-on-graze]"

codecaves:
  ExpHP.seasons-everywhere.item-on-graze:
    - "8B15 D0774B00               " # mov edx, [0x4b77d0]  ; PLAYER
    - "8D92 10060000               " # lea edx, [edx+0x610] ; player pos
    - "8B7B 08                     " # mov edi, [ebx+0x8] ; bullet pos
    - "83EC 20                     " # sub esp, 0x20 ; spawn_item has 8 args

    # Compute angle away from player.
    - "F30F1047 04                 " # movss xmm0, [edi + 4]  ; bullet y
    - "F30F5C42 04                 " # subss xmm0, [edx + 4]  ; bullet y - player y
    - "F30F114424 0C               " # movss DWORD [esp + 0xc], xmm0  ; use vel_angle arg as scratch
    - "D94424 0C                   " # fld DWORD [esp + 0xc]
    - "F30F1007                    " # movss xmm0, [edi]  ; bullet x
    - "F30F5C02                    " # subss xmm0, [edx]  ; bullet x - player x
    - "F30F114424 0C               " # movss DWORD [esp + 0xc], xmm0
    - "D94424 0C                   " # fld DWORD [esp + 0xc]
    # "E8 [Rx00496E70]             " # call math_atan2  ; math_atan2
    - "B8 706E4900                 " # mov eax, math_atan2
    - "FF D0                       " # call eax

    # Args 3 and 7 are totally unused, and arg 6 is unused for season items.
    - "C74424 1C FFFFFFFF          " # mov  DWORD [esp + 0x1c], 0xffffffff ; arg 8: unknown (TODO)
    - "C74424 10 3333F33F          " # mov  DWORD [esp + 0x10], 0x3ff33333 ; arg 5: vel_norm  (1.9f)
    - "D95C24 0C                   " # fstp DWORD [esp + 0xc]              ; arg 4: vel_angle
    - "897C24 04                   " # mov  DWORD [esp + 0x4], edi         ; arg 2: pos
    - "C70424 30000000             " # mov  DWORD [esp + 0x0], 0x30        ; arg 1: item type

    - "8B0D B8764B00               " # mov ecx, [0x4b76b8]  ; ITEM_MANAGER
    # "E8 [Rx00434740]             " # call spawn_item
    - "B8 40474300                 " # mov eax, spawn_item
    - "FF D0                       " # call eax

    - "5f // 5e // 8be5 // 5d      " # original code (pop edi, pop esi, etc.)
    # "E8 [Rx0044a0e1]             "
    # workaround for [Rx] being broken  (side-effect-free absolute jump)
    - "E8 00000000                 " # call next ins
    - "C70424 E1A04400             " # mov [esp], 0x0044a0e1
    - "C3                          " # ret

  # Wrapper around ECLPlus' IntVarSwitch that preserves the volatile ecx, edx, and xmm registers.
  ExpHP.seasons-everywhere.eclplus-int-switch:
    # Prologue that saves volatile registers
    - "55                    " # push   ebp
    - "89 E5                 " # mov    ebp,esp
    - "83 e4f0               " # and    esp,0xfffffff0   # align for movaps
    - "81 ec80000000         " # sub    esp,0x80
    - "0f290424              " # movaps XMMWORD PTR [esp],xmm0
    - "0f294c2410            " # movaps XMMWORD PTR [esp+0x10],xmm1
    - "0f29542420            " # movaps XMMWORD PTR [esp+0x20],xmm2
    - "0f295c2430            " # movaps XMMWORD PTR [esp+0x30],xmm3
    - "0f29642440            " # movaps XMMWORD PTR [esp+0x40],xmm4
    - "0f296c2450            " # movaps XMMWORD PTR [esp+0x50],xmm5
    - "0f29742460            " # movaps XMMWORD PTR [esp+0x60],xmm6
    - "0f297c2470            " # movaps XMMWORD PTR [esp+0x70],xmm7
    - "51                    " # push   ecx
    - "52                    " # push   edx

    # Forward args to ECLPlus
    - "ff 75 10              " # push   DWORD PTR [ebp+0x10]
    - "ff 75 0c              " # push   DWORD PTR [ebp+0xc]
    - "ff 75 08              " # push   DWORD PTR [ebp+0x8]
    - "FF15 E49F4900         " # call dword [0x499FE4]   # pointer to ECLplus.dll+IntVarSwitch

    # Epilogue that restores volatile registers
    - "5a                    " # pop    edx
    - "59                    " # pop    ecx
    - "0f280424              " # movaps xmm0,XMMWORD PTR [esp]
    - "0f284c2410            " # movaps xmm1,XMMWORD PTR [esp+0x10]
    - "0f28542420            " # movaps xmm2,XMMWORD PTR [esp+0x20]
    - "0f285c2430            " # movaps xmm3,XMMWORD PTR [esp+0x30]
    - "0f28642440            " # movaps xmm4,XMMWORD PTR [esp+0x40]
    - "0f286c2450            " # movaps xmm5,XMMWORD PTR [esp+0x50]
    - "0f28742460            " # movaps xmm6,XMMWORD PTR [esp+0x60]
    - "0f287c2470            " # movaps xmm7,XMMWORD PTR [esp+0x70]
    - "89 EC                 " # mov    esp,ebp
    - "5D                    " # pop    ebp

    - "C2 0c00               " # ret    0xc

  #==============================================
  # Utils

  # void* __stdcall Calloc(size)
  ExpHP.seasons-everywhere.calloc:
    - "55                " # push   ebp
    - "89E5              " # mov    ebp, esp
    - "57                " # push   edi

    - "8B4508            " # mov    eax, [ebp+0x8]
    - "50                " # push   eax
    - "B850B24700        " # mov    eax, MALLOC
    - "FFD0              " # call   eax
    - "89C7              " # mov    edi, eax

    - "8B4508            " # mov    eax, [ebp+0x8]
    - "50                " # push   eax
    - "6A00              " # push   dword 0x0
    - "57                " # push   edi
    - "B860CE4700        " # mov    eax, MEMSET
    - "FFD0              " # call   eax

    - "89F8              " # mov    eax, edi
    - "5F                " # pop    edi

    - "89EC              " # mov    esp, ebp
    - "5D                " # pop    ebp
    - "C20400            " # ret    4

  # This is th16.exe+0x402cf0, which doesn't exist in TH17.
  #
  # Much like the TH16 function, the ABI is that of returning a long double,
  # but it only has the precision of a float.
  #
  # long double __thiscall Rng::randf_minus_pi_to_pi()
  ExpHP.seasons-everywhere.randf-minus-pi-to-pi:
    - "55                " # push     ebp
    - "89E5              " # mov      ebp, esp
    - "51                " # push     ecx
    - "9B                " # fwait
    - "DBE3              " # fninit
    - "B8B0274000        " # mov      eax, RAND_DWORD
    - "FFD0              " # call     eax
    - "660F6EC0          " # movd     xmm0, eax

    # (ebp-0x4 is the space in the red zone left behind by
    #  the arg to rand_int, used as scratch)
    #
    # This is the float value 683565248.0, which is 2**32 / 2PI.
    - "C745FC83F9224E    " # mov      dword [ebp-0x4], 0x4e22f983

    # These three lines together are a cast from uint32_t to double
    - "F30FE6C0          " # cvtdq2pd xmm0, xmm0
    - "C1E81F            " # shr      eax, 0x1f
    - "F20F5804C5303F4A00" # addsd    xmm0, qword [eax*8+0x4a3f30]

    # Map into range from -PI to PI
    - "660F5AC0          " # cvtpd2ps xmm0, xmm0
    - "F30F5E45FC        " # divss    xmm0, dword [ebp-0x4]
    - "F30F5C0588454900  " # subss    xmm0, dword [FLOAT_PI]

    # Return in the FPU for seemingly no good reason.
    - "F30F1145FC        " # movss    dword [ebp-0x4], xmm0
    - "D945FC            " # fld      dword [ebp-0x4]
    - "89EC              " # mov      esp, ebp
    - "5D                " # pop      ebp
    - "C3                " # retn

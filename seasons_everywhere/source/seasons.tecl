#include "ECLinclude/ECLplus.tecl"
#include "game-constants.tecl"


//========================================
// TH16 special instructions, implemented by binhacking etEx

// spec0  (set season drops)
inline void dropSeason(int time, int max, int min) {
    etEx(NEG, 0, time, max, min, NEGF, NEGF);
}

// spec1  (make a boss drop season items per x damage)
inline void seasonDamage(int damage) {
    etEx(NEG, 1, damage, NEG, NEG, NEGF, NEGF);
}

// spec2  (pop up an error if there's no ECLplus)
inline void seasonsPatchCheckForEclPlus() {
    etEx(NEG, 2, NEG, NEG, NEG, NEGF, NEGF);
}

//========================================

// Call this immediately at the beginning of each stage,
// after the main script makes itself intangible.
inline void InitSeasons(int stageNum) {
    seasonsPatchCheckForEclPlus();

    // The player can exit the game at any time, leaving all of our global state in
    // an unexpected configuration for the next game start.  We would like to reset
    // all of this state and present the season menu every time the player begins
    // a new game, enters stage practice, spell practice, starts a replay, etc...
    // but we don't want to reset anything just because the player cleared a stage
    // and progressed to the next!
    //
    // To differentiate between "new games" and "next stages," we look at the score.
    // Thanks to stage clear bonuses, it is impossible to have a score of 0 after
    // clearing a stage.  (Just to be insanely paranoid, we also check that the
    // player hasn't reset their score by continuing... but I don't think you can
    // time a game over to coincide with stage clear bonus!)
    if (SCORE | CONTINUES) {
        enmCreate("SeasonInputEnemy", 0f, 0f, 1, 0, 0);
    } else {
        msgResetAll();
        enmCreate("SeasonMenuEnemy", 0f, 0f, stageNum, 0, 0);
    }
    enmCreate("SeasonGaugeEnemy", 0f, 0f, 1, 0, 0);
}

inline void SeasonDebugMenu() {
    enmCreate("SeasonDebugMenuEnemy", 0f, 0f, 1, 0, 0);
    while(true) {
        wait(1);
    }
}

inline void DebugAnmMenu() {
    enmCreate("DebugAnmMenuEnemy", 0f, 0f, 1, 0, 0);
    while(true) {
        wait(1);
    }
}

inline void SoundTest() {
    enmCreate("SoundTestEnemy", 0f, 0f, 1, 0, 0);
    while(true) {
        wait(1);
    }
}

inline void defaultSeasonDamage() {
    // This is 200 times the apparent scale factor of 1.4 that relates DPS in TH16 to TH17.
    //
    // It is written out as a literal for two reasons:
    // * Our custom ECL instructions don't support variables.
    // * Even if we decide to change the scaling of release damage later, this remains a
    //   good setting for damage-based item drops.
    seasonDamage(280);
}
